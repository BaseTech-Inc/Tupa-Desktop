@page "/ConAviso"

@inject NavigationManager NavigationManager

@using System.Text.Json
@using Tupa.Data


<meta charset="UTF-8">
<title> Tupã </title>
<link rel="stylesheet" href="/css/MainLayout.css">
<link href='https://unpkg.com/boxicons@2.0.7/css/boxicons.min.css' rel='stylesheet'>


<div class="@Auxilio.classSideBar">
    <div class="logo-details">
        <img src="css/Images/umbrella.png" class="@Auxilio.classLogo" />
        <div class="logo_name">Tupã</div>
        <i class="@Auxilio.classBotao" runat="server" id="btn" @onclick="Auxilio.reduzirMenu"></i>
    </div>
    <ul class="nav-list">
        <li>
            <a href="#" @onclick="goCadUsu">
                <i class='bx bx-user-plus'></i>
                <span class="links_name">Cadastrar usuários</span>
            </a>
            <span class="tooltip">Cadastrar usuários</span>
        </li>
        <li>
            <a href="#" @onclick="goConUsu">
                <i class='bx bx-user'></i>
                <span class="links_name">Consultar usuários</span>
            </a>
            <span class="tooltip">Consultar usuários</span>
        </li>
        <li>
            <a href="#" @onclick="goCadAviso">
                <i class='bx bx-error'></i>
                <span class="links_name">Cadastrar alertas</span>
            </a>
            <span class="tooltip">Adicionar alertas</span>
        </li>
        <li>
            <a href="#" @onclick="goConAviso">
                <i class='bx bx-bell'></i>
                <span class="links_name">Consultar alertas</span>
            </a>
            <span class="tooltip">Consultar alertas</span>
        </li>
        <a class="out" href="" @onclick="sair">
        <li class="profile">

            <i class='bx bx-log-out' id="log_out"> </i>

        </li>
        </a>
    </ul>
</div>
<section class="home-section">
    <div class="Title" style="width: 80%; margin-left: 10% ">
        <h3>Avisos</h3>
    </div>
    <div class="buscar" style="margin-left: 10%; width:80%;">
        <label class="lblcon" style="margin-left: 2%;">Dia:</label>
        <input class="inputcon" style="width: 2vw;" id="txtDia" @bind="dia"/>
        <label class="lblcon">Mês:</label>
        <input class="inputcon" style="width: 2vw;" id="txtMes" @bind="mes"/>
        <label class="lblcon">Ano:</label>
        <input class="inputcon" style="width:3vw;" id="txtAno" @bind="ano"/>
        <button class="botaocon" @onclick="Pesquisar"> <i class='bx bx-search' style="1vw"></i></button>

    </div>

    <div class="principal" style="width: 80%; height: 40vh; margin-left: 10%; font-size: 15px; text-align:center;">
        <div class="container" style="height: 30vh; overflow: auto; padding-left: 0;">
            <table>
                <tr>
                    <th style="width:20%">Id</th>
                    <th style="width:20%">Latitude</th>
                    <th style="width:25%">Longitude</th>
                    <th style="width:25%">Distrito</th>
                    <th style="width:20%">Cidade</th>
                    <th style="width:10%">Estado</th>
                    <th style="width:20%">País</th>
                    <th style="width:25%">Tempo Inicial</th>
                    <th style="width:25%">Tempo Final</th>
                    <th style="width:20%">Descrição</th>
                    <th style="width:20%">Transitividade</th>
                    <th style="width:10%">Atividade</th>
                    <th style="width:10%">Deletar</th>
                </tr>
                @if (alertaData != null)
                {
                    try
                    {

                        foreach (AlertasData data in alertaData)
                        {
            <tr>
                <td>@data.id</td>
                <td>@data.ponto.latitude</td>
                <td>@data.ponto.longitude</td>
                @if (data.distrito != null)
                {
                    <td>@data.distrito.nome</td>
                    <td>@data.distrito.cidade.nome</td>
                    <td>@data.distrito.cidade.estado.nome</td>
                    <td>Brasil</td>
                }
                else
                {
                    <td>null</td>
                    <td>null</td>
                    <td>null</td>
                    <td>null</td>
                }

                <td>@data.tempoInicio.ToString()</td>
                <td>@data.tempoFinal.ToString()</td>
                <td>@data.descricao</td>
                <td>@data.transitividade.ToString()</td>
                <td>@data.atividade.ToString()</td>
                <td @onclick=@(() => deletar(data.id))><i class='bx bx-trash' style="height:2vw;"></i></td>
            </tr>
                        }

                    }
                    catch
                    {
                        avisoCad = "Tente novamente em alguns instantes.";
                    }
            }
            else
            {

            }


            </table>
        </div>

        <div class="aviso" style="margin-top: 3vh;">
            <label class="aviso" style="margin-top:1vh"> @avisoCad</label>
        </div>
    </div>
</section>
@code {
    private string avisoCad = "";
    private void goCadUsu()
    {
        NavigationManager.NavigateTo("/CadUsu", true);

    }

    private void goConUsu()
    {
        NavigationManager.NavigateTo("/ConUsu", true);
    }

    private void goCadAviso()
    {
        NavigationManager.NavigateTo("/CadAviso", true);
    }

    private void goConAviso()
    {
        NavigationManager.NavigateTo("/ConAviso", true);
    }


    private async Task sair()
    {
        var response = await client.PostAsync($"/api/Account/logout", null);
        NavigationManager.NavigateTo("/index", true);

    }

}



@code
{

    private string dia = DateTime.Today.Day.ToString();
    private string mes = DateTime.Today.Month.ToString();
    private string ano = DateTime.Today.Year.ToString();



    private IList<AlertasData> alertaData = null;

    private static readonly HttpClient client = new HttpClient();
    private static string baseAddress = "https://tupaserver.azurewebsites.net/";

    protected override async Task OnInitializedAsync()
    {
        if (client.BaseAddress == null)
        {
            client.BaseAddress = new Uri(baseAddress);

        }

        await Pesquisar();


    }

    private async Task Pesquisar ()
    {

        try
        {
            client.DefaultRequestHeaders.Clear();
            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Add("Authorization", String.Format("Bearer {0}", Message.token));

            var response = await client.GetAsync($"/api/v1/Alertas?year={ano}&month={mes}&day={dia}");
            var responseString = await response.Content.ReadAsStringAsync();
            var responseJson = JsonSerializer.Deserialize<Response<IList<AlertasData>>>(responseString);
            if (responseJson.data[0].ponto != null)
            {
                alertaData = responseJson.data;
                avisoCad = "";
            }
            else
            {
                avisoCad = "Tente novamente em alguns instantes.";
            }

        }

        catch
        {
            avisoCad = "Tente novamente em alguns instantes.";
        }
    }


}


@code{
    private void deletar(string id)
    {
        var resultTask = Task.Run(() => deletarAsync(id));
        resultTask.Wait();

        Response<string> result = resultTask.GetAwaiter().GetResult();
    }

    private async Task<Response<string>> deletarAsync(string id)
    {
        client.DefaultRequestHeaders.Clear();
        client.DefaultRequestHeaders.Accept.Clear();
        client.DefaultRequestHeaders.Add("Authorization", String.Format("Bearer {0}", Message.token));
        var response = await client.DeleteAsync($"/api/v1/Alertas?Id={id}");
        var responseString = await response.Content.ReadAsStringAsync();
        var responseJson = JsonSerializer.Deserialize<Response<string>>(responseString);
        await Pesquisar();
        return responseJson;
    }
}
